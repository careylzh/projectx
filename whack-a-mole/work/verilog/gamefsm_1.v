/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module gamefsm_1 (
    input clk,
    input rst,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input b1_press,
    input b2_press,
    input b3_press,
    input [2:0] io_dip,
    output reg [2:0] led
  );
  
  
  
  reg [15:0] user_input;
  
  wire [16-1:0] M_alumod_alu;
  wire [1-1:0] M_alumod_z;
  wire [1-1:0] M_alumod_v;
  wire [1-1:0] M_alumod_n;
  reg [6-1:0] M_alumod_alufn;
  reg [16-1:0] M_alumod_a;
  reg [16-1:0] M_alumod_b;
  alu_5 alumod (
    .alufn(M_alumod_alufn),
    .a(M_alumod_a),
    .b(M_alumod_b),
    .alu(M_alumod_alu),
    .z(M_alumod_z),
    .v(M_alumod_v),
    .n(M_alumod_n)
  );
  
  reg [15:0] masked_test_cases;
  
  localparam INIT_state = 4'd0;
  localparam IDLE_state = 4'd1;
  localparam CHECK_CORRECT_PRESS_state = 4'd2;
  localparam SHOW_SCORE_state = 4'd3;
  localparam CALCULATE_SCORE_state = 4'd4;
  localparam WAIT_state = 4'd5;
  localparam CALCULATE_DIGIT_state = 4'd6;
  localparam CALCULATE_DIGIT_INI_state = 4'd7;
  localparam CALCULATE_SCORE_1_state = 4'd8;
  localparam CALCULATE_SCORE_2_state = 4'd9;
  localparam CALCULATE_SCORE_3_state = 4'd10;
  
  reg [3:0] M_state_d, M_state_q = INIT_state;
  reg [15:0] M_store_presses_d, M_store_presses_q = 1'h0;
  reg [15:0] M_store_test_cases_d, M_store_test_cases_q = 1'h0;
  reg [15:0] M_temp_register_d, M_temp_register_q = 1'h0;
  reg [15:0] M_score_d, M_score_q = 1'h0;
  reg [2:0] M_button_presses_before_timer_d, M_button_presses_before_timer_q = 1'h0;
  reg [3:0] M_first_digit_d, M_first_digit_q = 1'h0;
  reg [3:0] M_second_digit_d, M_second_digit_q = 1'h0;
  reg [15:0] M_times_d, M_times_q = 1'h0;
  wire [1-1:0] M_stateCOUNT_inc_state;
  stateCounter_6 stateCOUNT (
    .clk(clk),
    .rst(rst),
    .inc_state(M_stateCOUNT_inc_state)
  );
  wire [7-1:0] M_seg_seg;
  wire [2-1:0] M_seg_sel;
  reg [8-1:0] M_seg_values;
  multi_seven_seg_7 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_score_d = M_score_q;
    M_times_d = M_times_q;
    M_button_presses_before_timer_d = M_button_presses_before_timer_q;
    M_second_digit_d = M_second_digit_q;
    M_store_presses_d = M_store_presses_q;
    M_store_test_cases_d = M_store_test_cases_q;
    M_first_digit_d = M_first_digit_q;
    
    led = 1'h0;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_seg_values = {M_second_digit_q, M_first_digit_q};
    M_alumod_a = M_store_test_cases_q;
    user_input[3+12-:13] = 1'h0;
    user_input[0+0-:1] = b1_press;
    user_input[1+0-:1] = b2_press;
    user_input[2+0-:1] = b3_press;
    if (b1_press == 1'h1) begin
      M_button_presses_before_timer_d[0+0-:1] = 1'h1;
    end else begin
      if (b2_press == 1'h1) begin
        M_button_presses_before_timer_d[1+0-:1] = 1'h1;
      end else begin
        if (b3_press == 1'h1) begin
          M_button_presses_before_timer_d[2+0-:1] = 1'h1;
        end
      end
    end
    M_store_presses_d = user_input;
    M_alumod_alufn = 6'h00;
    M_alumod_a = 1'h0;
    M_alumod_b = 1'h0;
    masked_test_cases[3+12-:13] = 1'h0;
    masked_test_cases[0+2-:3] = M_store_test_cases_q[0+2-:3];
    led = masked_test_cases[0+2-:3];
    
    case (M_state_q)
      INIT_state: begin
        M_times_d = 1'h0;
        led = 1'h0;
        M_store_test_cases_d = 16'h0000;
        if (b2_press) begin
          M_state_d = IDLE_state;
        end else begin
          led = 1'h0;
        end
      end
      SHOW_SCORE_state: begin
        M_seg_values = {M_second_digit_q, M_first_digit_q};
        if (M_store_test_cases_q == 3'h6) begin
          M_store_test_cases_d = M_store_test_cases_q + 1'h1;
        end else begin
          M_store_test_cases_d = M_store_test_cases_q + 1'h1;
          M_state_d = CHECK_CORRECT_PRESS_state;
        end
      end
      CALCULATE_DIGIT_state: begin
        if (M_first_digit_q >= 4'ha) begin
          M_first_digit_d = M_first_digit_q - 4'ha;
          M_second_digit_d = M_second_digit_q + 1'h1;
          M_state_d = SHOW_SCORE_state;
        end
        M_state_d = SHOW_SCORE_state;
        if (M_second_digit_q >= 1'h1 && M_first_digit_q >= 1'h0) begin
          M_first_digit_d = 4'h8;
          M_second_digit_d = 4'h8;
          M_state_d = WAIT_state;
        end
        M_state_d = SHOW_SCORE_state;
      end
      CALCULATE_SCORE_3_state: begin
        if (M_button_presses_before_timer_q[2+0-:1] == masked_test_cases[2+0-:1] && M_button_presses_before_timer_q[1+0-:1] == masked_test_cases[1+0-:1] && M_button_presses_before_timer_q[0+0-:1] == masked_test_cases[0+0-:1] && M_score_q == 1'h0 && (masked_test_cases[2+0-:1] != 1'h0 || masked_test_cases[1+0-:1] != 1'h0 || masked_test_cases[0+0-:1] != 1'h0)) begin
          M_score_d = M_score_q + 1'h1;
        end
        M_button_presses_before_timer_d = 1'h0;
        M_state_d = CALCULATE_DIGIT_INI_state;
      end
      CALCULATE_SCORE_state: begin
        M_score_d = 1'h0;
        M_state_d = CALCULATE_SCORE_3_state;
      end
      CALCULATE_DIGIT_INI_state: begin
        if (M_score_q > 1'h0) begin
          M_first_digit_d = M_first_digit_q + 1'h1;
        end
        M_score_d = 1'h0;
        M_state_d = CALCULATE_DIGIT_state;
      end
      CHECK_CORRECT_PRESS_state: begin
        if (M_second_digit_q == 4'h8) begin
          M_state_d = WAIT_state;
        end
        if (M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = CALCULATE_SCORE_state;
        end
        if (M_second_digit_q >= 4'ha) begin
          M_second_digit_d = 1'h0;
        end
      end
      WAIT_state: begin
        if (M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = INIT_state;
        end
      end
      IDLE_state: begin
        M_first_digit_d = 1'h0;
        M_second_digit_d = 1'h0;
        M_state_d = CHECK_CORRECT_PRESS_state;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_store_presses_q <= M_store_presses_d;
    M_store_test_cases_q <= M_store_test_cases_d;
    M_temp_register_q <= M_temp_register_d;
    M_score_q <= M_score_d;
    M_button_presses_before_timer_q <= M_button_presses_before_timer_d;
    M_first_digit_q <= M_first_digit_d;
    M_second_digit_q <= M_second_digit_d;
    M_times_q <= M_times_d;
    M_state_q <= M_state_d;
  end
  
endmodule
