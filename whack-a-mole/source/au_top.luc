module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    //output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [1][3],    // DIP switches on IO Shield
    input b1_press,
    input b2_press,
    input b3_press,    
    output b1_light,
    output b2_light,
    output b3_light,
    input reset
){  
// sig btn_light_intemediate[3];
  sig rst;                  // reset signal
  gamefsm gameFsmInstance(.clk(clk),.rst(rst));
    .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner b1_press_cond;
    button_conditioner b2_press_cond;
    button_conditioner b3_press_cond;
    edge_detector buttondetector1(#RISE(1), #FALL(0)); //detect on rising edge only
    edge_detector buttondetector2(#RISE(1), #FALL(0)); //detect on rising edge only
    edge_detector buttondetector3(#RISE(1), #FALL(0)); //detect on rising edge only
    
  }
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    if(reset) rst = 1; //add reset button "to all states"
    //io_led = 3x{{8h00}};    // turn LEDs off
    
    io_seg = gameFsmInstance.io_seg;          // turn segments off
    io_sel = gameFsmInstance.io_sel;           //see io_sel in gamefsm.luc
    
    //testcase: see if io_button works with the way I defined the button conditioners and edge detectors. 
    //b1_press_cond.in = io_button[0]; 
    //b2_press_cond.in = io_button[1];
    //b3_press_cond.in = io_button[2];
    
    //conditioners. assigning the actual raw inputs from the breakout to the conditioners
    b1_press_cond.in = b1_press; 
    b2_press_cond.in = b2_press;
    b3_press_cond.in = b3_press;
    
    buttondetector1.in = b1_press_cond.out; 
    buttondetector2.in = b2_press_cond.out;
    buttondetector3.in = b3_press_cond.out;
    
    //test case: these 2 lines give a TDO
    //b1_light = b1_press; //directly take the output of the b1_press without conditioning, see group report for why.
    //b2_light = b2_press;
    //b3_light = b3_press_cond.out;
    
    //b1_light = 1;
    //b2_light = 0;
    //b3_light = 1;
        
    //b1_light = b1_press_cond.out;
    //b2_light = b2_press_cond.out;    
    //b3_light = b3_press_cond.out;   //take the output of the button condition instead of the output of the button detector  

    //no TDO errors with these 
    //    b1_light = buttondetector1.out;
    //    b2_light = buttondetector2.out;
    //    b3_light = buttondetector3.out;
    
    //io_led[0][0] = 1;
    
    /*test case: nothing wrong with the edge detector. even if we just take the output of the button conditioner, 
    the inputs into the io_leds are still high even without button presses. 
       */
//    io_led[0][0] = b1_press_cond.out;
//    io_led[0][2] = b2_press_cond.out;  
//    io_led[0][4] = b3_press_cond.out;
    
    //test case: use intermediate output signals before sending to some display
    //btn_light_intemediate[0] = buttondetector1.out;
    //btn_light_intemediate[1] = buttondetector2.out;
    //btn_light_intemediate[2] = buttondetector3.out;
    //io_led[0][0] = btn_light_intemediate[0];
    //io_led[0][2] = btn_light_intemediate[1];  
    //io_led[0][4] = btn_light_intemediate[2];
    
    
    //no need the above anymore, linking the io leds to respective io leds in gamefsm
    //io_led[0][0] = gameFsmInstance.led[0];
    //io_led[0][2] = gameFsmInstance.led[1];
    //io_led[0][4] = gameFsmInstance.led[2];
    
    //io_led[0][0] = buttondetector1.out;
    //io_led[0][2] = buttondetector2.out;  
    //io_led[0][4] = buttondetector3.out;
    
    
    //gameFsmInstance.b1_press = b1_press_cond.out;
    //gameFsmInstance.b2_press = b2_press_cond.out;
    //gameFsmInstance.b3_press = b3_press_cond.out;
    
        
    //gameFsmInstance.b1_press = b1_press_cond.out;
    //gameFsmInstance.b2_press = b2_press_cond.out;
    //gameFsmInstance.b3_press = b3_press_cond.out;
    
    //must add edge detectors for arcade buttons. normal cheap buttons no need 
    gameFsmInstance.b1_press = buttondetector1.out;
    gameFsmInstance.b2_press = buttondetector2.out;
    gameFsmInstance.b3_press = buttondetector3.out;
    
    //no need these debug modes anymore. in the past used to use one dip switch each to show user_inputs, test cases and alu output respectively for debugging.
    gameFsmInstance.io_dip[0][0]= io_dip[0][0];
    gameFsmInstance.io_dip[0][1]= io_dip[0][1];    
    gameFsmInstance.io_dip[0][2]= io_dip[0][2];    

    //debug leds, no need anymore 
    //io_led[0] = gameFsmInstance.io_led[0];
    //io_led[1] = gameFsmInstance.io_led[1];
    //io_led[2] = gameFsmInstance.io_led[2];
    
    b1_light = gameFsmInstance.led[0];
    b2_light = gameFsmInstance.led[1];
    b3_light = gameFsmInstance.led[2];

}